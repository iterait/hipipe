version: 2

references:

  update_submodules: &update_submodules
    run:
      name: Update git submodules.
      command: |
        git submodule update --init --recursive

  ubuntu_deps: &ubuntu_deps
    run:
      name: Install dependencies on Ubuntu.
      command: |
        apt-get update -qy
        apt -y install build-essential cmake clang git \
          libopencv-dev libboost-all-dev python3-dev python3-numpy

  ubuntu_install_tensorflow_cc: &ubuntu_install_tensorflow_cc
    run:
      name: Install tensorflow_cc on Ubuntu.
      command: |
        apt -y install curl autoconf autogen libtool git unzip mlocate \
          python3-pip python3-wheel
        updatedb
        # install tensorflow_cc
        orig_dir="`pwd`" && cd ~
        git clone https://github.com/FloopCZ/tensorflow_cc.git
        cd tensorflow_cc/tensorflow_cc
        mkdir build && cd build
        cmake ..
        make > log.txt 2>&1 && make install
        cd "$orig_dir"

  arch_deps: &arch_deps
    run:
      name: Install dependencies on Arch Linux.
      command: |
        pacman -S --noconfirm base-devel cmake clang \
          opencv boost python python-numpy git openssh

  build_by_gcc: &build_by_gcc
    run:
      name: Build by g++.
      command: |
        mkdir build && cd build
        # decrease the debug level to reduce g++ memory usage
        cmake -DCMAKE_BUILD_TYPE=Debug ..
        make
        make install

  build_by_clang: &build_by_clang
    run:
      name: Build by clang++.
      command: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ ..
        make
        make install

  build_with_tf_static: &build_with_tf_static
    run:
      name: Build with static TensorFlow.
      command: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TENSORFLOW=ON ..
        make
        make install

  test: &test
    run:
      name: Run tests.
      command: |
        make test

jobs:

  test_archlinux_gcc:
    docker:
      - image: pritunl/archlinux:2017-07-08
    working_directory: ~/cxtream
    steps:
      - *arch_deps
      - checkout
      - *update_submodules
      - *build_by_gcc
      - *test

  test_ubuntu16.10_gcc:
    docker:
      - image: ubuntu:16.10
    working_directory: ~/cxtream
    steps:
      - *ubuntu_deps
      - checkout
      - *update_submodules
      - *build_by_gcc
      - *test

  test_ubuntu16.10_gcc_tf_static:
    docker:
      - image: ubuntu:16.10
    working_directory: ~/cxtream
    steps:
      - *ubuntu_deps
      - *ubuntu_install_tensorflow_cc
      - store_artifacts:
          path: ~/tensorflow_cc/tensorflow_cc/build/log.txt
      - checkout
      - *update_submodules
      - *build_with_tf_static
      - *test

  test_ubuntu17.04_clang:
    docker:
      - image: ubuntu:17.04
    working_directory: ~/cxtream
    steps:
      - *ubuntu_deps
      - checkout
      - *update_submodules
      - *build_by_clang
      - *test

workflows:

  version: 2
  test-matrix:
    jobs:
      - test_archlinux_gcc
      - test_ubuntu16.10_gcc
      - test_ubuntu17.04_clang

      # TODO: It would be convenient to test cxtream::tensorflow as well, but
      # TensorFlow cannot be compiled in the current CircleCI limits. If those
      # increase, uncomment the following:
      # - test_ubuntu16.10_gcc_tf_static
